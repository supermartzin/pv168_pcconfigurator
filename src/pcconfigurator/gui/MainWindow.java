/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package pcconfigurator.gui;

import java.math.BigDecimal;
import java.time.format.DateTimeFormatter;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.SwingWorker;
import pcconfigurator.componentmanager.Component;
import pcconfigurator.configurationmanager.Configuration;
import pcconfigurator.configurationmanager.ConfigurationManager;
import pcconfigurator.configurationmanager.ConfigurationManagerImpl;
import pcconfigurator.pcsetmanager.PcSet;
import pcconfigurator.pcsetmanager.PcSetManager;
import pcconfigurator.pcsetmanager.PcSetManagerImpl;

/**
 *
 * @author Martin
 */
public class MainWindow extends javax.swing.JFrame {

    private final java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("pcconfigurator/gui/Strings");
    private static final Logger LOGGER = Logger.getLogger(MainWindow.class.getName());
    private final ConfigurationManager configManager;
    private final ConfigurationTableModel configModel;
    private final ComponentsInConfigTableModel compModel;
    
    private final PcSetManager pcSetManager;
    
    private Component currentComponent;
    private Configuration configuration;
    private Configuration currentConfiguration;
    private final MainWindow mainWindow = this;
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        pcSetManager = new PcSetManagerImpl();
        configManager = new ConfigurationManagerImpl();
        configModel = (ConfigurationTableModel) configsTable.getModel();
        compModel = (ComponentsInConfigTableModel) compsInCofigTable.getModel();
        findAllConfigurations();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        searchNameLabel = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        configsTable = new javax.swing.JTable();
        editConfButton = new javax.swing.JButton();
        createConfButton = new javax.swing.JButton();
        deleteConfButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        confNameTextBox = new javax.swing.JLabel();
        confCreatorTextBox = new javax.swing.JLabel();
        createdOnTextBox = new javax.swing.JLabel();
        lastChangeOnTextBox = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        compsInCofigTable = new javax.swing.JTable();
        addCompToConfButton = new javax.swing.JButton();
        deleteCompInConfButton = new javax.swing.JButton();
        editAmountButton = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        totalPriceLabel = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        totalPowerLabel = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        showAllConfsButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("pcconfigurator/gui/Strings"); // NOI18N
        setTitle(bundle.getString("pcconfigurator")); // NOI18N
        setLocationByPlatform(true);
        setResizable(false);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel1.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        jLabel1.setText(bundle.getString("listOfConfigurations")); // NOI18N

        jLabel2.setFont(new java.awt.Font("sansserif", 3, 12)); // NOI18N
        jLabel2.setText(bundle.getString("searchBy")); // NOI18N

        jLabel3.setText(bundle.getString("searchByName")); // NOI18N

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setText(bundle.getString("searchByComponent")); // NOI18N

        jButton1.setText(bundle.getString("search")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText(bundle.getString("search")); // NOI18N

        jLabel5.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        jLabel5.setText(bundle.getString("configuration")); // NOI18N

        configsTable.setModel(new ConfigurationTableModel());
        configsTable.setAutoscrolls(false);
        configsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        configsTable.getTableHeader().setReorderingAllowed(false);
        configsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                configsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(configsTable);
        if (configsTable.getColumnModel().getColumnCount() > 0) {
            configsTable.getColumnModel().getColumn(0).setHeaderValue(bundle.getString("name")); // NOI18N
            configsTable.getColumnModel().getColumn(1).setHeaderValue(bundle.getString("creator")); // NOI18N
            configsTable.getColumnModel().getColumn(2).setHeaderValue(bundle.getString("created")); // NOI18N
            configsTable.getColumnModel().getColumn(3).setHeaderValue(bundle.getString("lastChange")); // NOI18N
        }

        editConfButton.setText(bundle.getString("edit")); // NOI18N
        editConfButton.setEnabled(false);
        editConfButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editConfButtonActionPerformed(evt);
            }
        });

        createConfButton.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        createConfButton.setText(bundle.getString("createConfiguration")); // NOI18N
        createConfButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createConfButtonActionPerformed(evt);
            }
        });

        deleteConfButton.setText(bundle.getString("delete")); // NOI18N
        deleteConfButton.setEnabled(false);
        deleteConfButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteConfButtonActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel6.setText(bundle.getString("name")); // NOI18N

        jLabel7.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel7.setText(bundle.getString("creator")); // NOI18N

        jLabel8.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel8.setText(bundle.getString("created")); // NOI18N

        jLabel9.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel9.setText(bundle.getString("lastChange")); // NOI18N

        jLabel14.setFont(new java.awt.Font("sansserif", 1, 15)); // NOI18N
        jLabel14.setText(bundle.getString("listOfComponents")); // NOI18N

        compsInCofigTable.setModel(new ComponentsInConfigTableModel());
        compsInCofigTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        compsInCofigTable.getTableHeader().setReorderingAllowed(false);
        compsInCofigTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                compsInCofigTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(compsInCofigTable);
        if (compsInCofigTable.getColumnModel().getColumnCount() > 0) {
            compsInCofigTable.getColumnModel().getColumn(0).setHeaderValue(bundle.getString("vendor")); // NOI18N
            compsInCofigTable.getColumnModel().getColumn(1).setHeaderValue(bundle.getString("name")); // NOI18N
            compsInCofigTable.getColumnModel().getColumn(2).setHeaderValue(bundle.getString("type")); // NOI18N
            compsInCofigTable.getColumnModel().getColumn(3).setHeaderValue(bundle.getString("price")); // NOI18N
            compsInCofigTable.getColumnModel().getColumn(4).setHeaderValue(bundle.getString("power")); // NOI18N
            compsInCofigTable.getColumnModel().getColumn(5).setHeaderValue(bundle.getString("amount")); // NOI18N
        }

        addCompToConfButton.setText(bundle.getString("addComponent")); // NOI18N
        addCompToConfButton.setEnabled(false);
        addCompToConfButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCompToConfButtonActionPerformed(evt);
            }
        });

        deleteCompInConfButton.setText(bundle.getString("deleteComponent")); // NOI18N
        deleteCompInConfButton.setEnabled(false);
        deleteCompInConfButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCompInConfButtonActionPerformed(evt);
            }
        });

        editAmountButton.setText(bundle.getString("editAmount")); // NOI18N
        editAmountButton.setEnabled(false);
        editAmountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editAmountButtonActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("sansserif", 2, 13)); // NOI18N
        jLabel15.setText(bundle.getString("totalPrice")); // NOI18N

        totalPriceLabel.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N

        jLabel17.setFont(new java.awt.Font("sansserif", 2, 13)); // NOI18N
        jLabel17.setText(bundle.getString("totalPower")); // NOI18N

        totalPowerLabel.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N

        jLabel26.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel26.setText("€");

        jLabel27.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel27.setText("W");

        showAllConfsButton.setText(bundle.getString("showAll")); // NOI18N
        showAllConfsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllConfsButtonActionPerformed(evt);
            }
        });

        jMenu1.setText(bundle.getString("program")); // NOI18N

        jMenuItem1.setText(bundle.getString("about")); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText(bundle.getString("exit")); // NOI18N
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText(bundle.getString("componentManager")); // NOI18N
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(editConfButton, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteConfButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 458, Short.MAX_VALUE)
                    .addComponent(createConfButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(showAllConfsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jLabel3)
                                                    .addComponent(jLabel4))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(jComboBox1, 0, 280, Short.MAX_VALUE)
                                                    .addComponent(searchNameLabel))
                                                .addGap(2, 2, 2)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)))))))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jSeparator2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel14)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addComponent(jSeparator3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totalPriceLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel26)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totalPowerLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel27)
                                .addGap(11, 11, 11))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel9)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(confNameTextBox)
                                            .addComponent(confCreatorTextBox)
                                            .addComponent(createdOnTextBox)
                                            .addComponent(lastChangeOnTextBox))))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addCompToConfButton, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteCompInConfButton, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(editAmountButton, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(showAllConfsButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(searchNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jButton2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(editConfButton)
                            .addComponent(deleteConfButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(createConfButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(confNameTextBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(confCreatorTextBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(createdOnTextBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(lastChangeOnTextBox))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(totalPriceLabel)
                            .addComponent(jLabel17)
                            .addComponent(totalPowerLabel)
                            .addComponent(jLabel26)
                            .addComponent(jLabel27))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addCompToConfButton)
                            .addComponent(deleteCompInConfButton)
                            .addComponent(editAmountButton))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        ComponentManagerFrame compFrame = new ComponentManagerFrame();
        compFrame.setVisible(true);
    }//GEN-LAST:event_jMenu2MouseClicked

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JDialog aboutApp = new AboutAppDialog(this, true);
        aboutApp.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void createConfButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createConfButtonActionPerformed
        JDialog createConfiguration = new CreateConfigurationDialog(this, true);
        createConfiguration.setVisible(true);
    }//GEN-LAST:event_createConfButtonActionPerformed

    private void editConfButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editConfButtonActionPerformed
        configuration = configModel.getConfiguration(configsTable.getSelectedRow());
        EditConfigurationDialog editConfiguration = new EditConfigurationDialog(this, true);
        editConfiguration.setTextFields(configuration.getName(), configuration.getCreator());
        editConfiguration.setVisible(true);
    }//GEN-LAST:event_editConfButtonActionPerformed

    private void editAmountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editAmountButtonActionPerformed
        JDialog editAmount = new EditAmountDialog(this, true);
        editAmount.setVisible(true);
    }//GEN-LAST:event_editAmountButtonActionPerformed

    private void addCompToConfButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCompToConfButtonActionPerformed
        AddCompToConfDialog addCompToConf = new AddCompToConfDialog(this, true);
        Component returnedComponent = addCompToConf.showDialog();
        addCompToConf.setVisible(false);
        pcSetManager.createPcSet(new PcSet(returnedComponent, currentConfiguration));      
        findAllComponentsInConfiguration();
    }//GEN-LAST:event_addCompToConfButtonActionPerformed

    private void deleteConfButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteConfButtonActionPerformed
        configuration = configModel.getConfiguration(configsTable.getSelectedRow());
        DeleteConfigurationDialog deleteConfiguration = new DeleteConfigurationDialog(this, true);
        deleteConfiguration.setConfToDelete(configuration);
        deleteConfiguration.setVisible(true);
    }//GEN-LAST:event_deleteConfButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (searchNameLabel.getText().isEmpty() || searchNameLabel.getText() == null)
        {
            WarningDialog warningDialog = new WarningDialog(this, true);
            warningDialog.setSize(365, 140);
            warningDialog.setWarningLabel(bundle.getString("searchByNameEmpty"));
            warningDialog.setVisible(true);
        }
        else 
        {
            findAllConfigurationsByName(searchNameLabel.getText());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void showAllConfsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllConfsButtonActionPerformed
        SwingWorker<Set<Configuration>, Void> worker = new SwingWorker<Set<Configuration>, Void>() {

            @Override
            protected Set<Configuration> doInBackground() throws Exception {
                return configManager.findAllConfigurations();
            }

            @Override
            protected void done() {
                try {
                    if (get().isEmpty()) {
                        WarningDialog warningDialog = new WarningDialog(mainWindow, true);
                        warningDialog.setSize(365, 140);
                        warningDialog.setWarningLabel(bundle.getString("noConfigurationInDB"));
                        warningDialog.setVisible(true);
                    }
                    else {
                        configModel.loadConfigurations(get());
                        configModel.fireTableDataChanged();
                    }
                } catch (InterruptedException | ExecutionException ex) {
                    LOGGER.log(Level.SEVERE, "Error getting configurations from database to table: ", ex);
                }
            }
        };
        
        worker.execute();
    }//GEN-LAST:event_showAllConfsButtonActionPerformed

    private void configsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_configsTableMouseClicked
        currentConfiguration = configModel.getConfigurationAt(configsTable.convertRowIndexToModel(configsTable.getSelectedRow()));
        confNameTextBox.setText(currentConfiguration.getName());
        createdOnTextBox.setText(currentConfiguration.getCreationTime().format(DateTimeFormatter.ISO_LOCAL_TIME) + " - " + currentConfiguration.getCreationTime().format(DateTimeFormatter.ISO_LOCAL_DATE));
        confCreatorTextBox.setText(currentConfiguration.getCreator());
        lastChangeOnTextBox.setText(currentConfiguration.getLastUpdate().format(DateTimeFormatter.ISO_LOCAL_TIME) + " - " + currentConfiguration.getLastUpdate().format(DateTimeFormatter.ISO_LOCAL_DATE));
        addCompToConfButton.setEnabled(true);
        editConfButton.setEnabled(true);
        deleteConfButton.setEnabled(true);
        
        findAllComponentsInConfiguration();
        refreshPriceAndPower();
    }//GEN-LAST:event_configsTableMouseClicked

    private void deleteCompInConfButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCompInConfButtonActionPerformed
        if(currentComponent != null){
            deleteComponentInConfiguration(currentComponent, currentConfiguration);
        }
        findAllComponentsInConfiguration();
        refreshPriceAndPower();
    }//GEN-LAST:event_deleteCompInConfButtonActionPerformed

    private void compsInCofigTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_compsInCofigTableMouseClicked
        deleteCompInConfButton.setEnabled(true);
        editAmountButton.setEnabled(true);
        currentComponent = compModel.getComponentAt(compsInCofigTable.convertRowIndexToModel(compsInCofigTable.getSelectedRow()));
    }//GEN-LAST:event_compsInCofigTableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainWindow().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCompToConfButton;
    private javax.swing.JTable compsInCofigTable;
    private javax.swing.JLabel confCreatorTextBox;
    private javax.swing.JLabel confNameTextBox;
    private javax.swing.JTable configsTable;
    private javax.swing.JButton createConfButton;
    private javax.swing.JLabel createdOnTextBox;
    private javax.swing.JButton deleteCompInConfButton;
    private javax.swing.JButton deleteConfButton;
    private javax.swing.JButton editAmountButton;
    private javax.swing.JButton editConfButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel lastChangeOnTextBox;
    private javax.swing.JTextField searchNameLabel;
    private javax.swing.JButton showAllConfsButton;
    private javax.swing.JLabel totalPowerLabel;
    private javax.swing.JLabel totalPriceLabel;
    // End of variables declaration//GEN-END:variables
    
    
    public void createConfiguration(String name, String creator) {
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() throws Exception {
                Configuration conf = new Configuration(name, creator);
                configManager.createConfiguration(conf);
                return null;
            }

            @Override
            protected void done() {
                configModel.loadConfigurations(configManager.findAllConfigurations());
                configModel.fireTableDataChanged();
            }
        };
        
        worker.execute();
    }
    
    public void updateConfiguration(String name, String creator) {
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() throws Exception {
                configuration.setName(name);
                configuration.setCreator(creator);
                configManager.updateConfiguration(configuration);
                return null;
            }

            @Override
            protected void done() {
                configModel.loadConfigurations(configManager.findAllConfigurations());
                configModel.fireTableDataChanged();
            }
        };
        
        worker.execute();
    }
    
    public void deleteConfiguration(Configuration configuration) {
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() throws Exception {
                configManager.deleteConfiguration(configuration);
                return null;
            }

            @Override
            protected void done() {
                configModel.loadConfigurations(configManager.findAllConfigurations());
                configModel.fireTableDataChanged();
            }
        };
        
        worker.execute();
    }
    
    private void findAllConfigurationsByName(String name) {
        SwingWorker<Set<Configuration>, Void> worker = new SwingWorker<Set<Configuration>, Void>() {

            @Override
            protected Set<Configuration> doInBackground() throws Exception {
                return configManager.findConfigurationByName(name);
            }

            @Override
            protected void done() {
                try {
                    if (get().isEmpty()) {
                        WarningDialog warningDialog = new WarningDialog(mainWindow, true);
                        warningDialog.setSize(365, 140);
                        warningDialog.setWarningLabel(bundle.getString("noConfigurationFound"));
                        warningDialog.setVisible(true);
                    }
                    else {
                        configModel.loadConfigurations(get());
                        configModel.fireTableDataChanged();
                    }
                } catch (InterruptedException | ExecutionException ex) {
                    LOGGER.log(Level.SEVERE, "Error getting configurations from database to table: ", ex);
                }
            }
        };
        
        worker.execute();       
    }
    
    private void findAllConfigurations() {
        SwingWorker<Set<Configuration>, Void> worker = new SwingWorker<Set<Configuration>, Void>() {

            @Override
            protected Set<Configuration> doInBackground() throws Exception {
                return configManager.findAllConfigurations();
            }

            @Override
            protected void done() {
                try {
                    configModel.loadConfigurations(get());
                    configModel.fireTableDataChanged();
                } catch (InterruptedException | ExecutionException ex) {
                    LOGGER.log(Level.SEVERE, "Error getting configurations from database to table: ", ex);
                }
            }
        };
        worker.execute();
    }
    
    private void findAllComponentsInConfiguration() {
        SwingWorker<Map<Component,Integer>, Void> worker = new SwingWorker<Map<Component,Integer>, Void>() {

            @Override
            protected Map<Component,Integer> doInBackground() throws Exception {
                /*// test
                Component component1 = new Component("Intel", (new BigDecimal(25.50)).setScale(2, BigDecimal.ROUND_HALF_UP), ComponentTypes.CPU, 45, "Pentium IV 4200X");
                Component component2 = new Component("Kingston", (new BigDecimal(37.50)).setScale(2, BigDecimal.ROUND_HALF_UP), ComponentTypes.RAM, 15, "DDR3 Memory 1600M"); 
                compManager.createComponent(component1);
                compManager.createComponent(component2);
                // end test*/
                return pcSetManager.listCompsInConfiguration(currentConfiguration);
            }

            @Override
            protected void done() {
                try {                   
                    compModel.loadComponents(get());
                    compModel.fireTableDataChanged();
                } catch (InterruptedException | ExecutionException ex) {
                    LOGGER.log(Level.SEVERE, "Error getting components from database to table: ", ex);
                }
            }
        };
        
        worker.execute();
    }
    
    private void deleteComponentInConfiguration(Component component, Configuration configuration) {
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() throws Exception {
                pcSetManager.deletePcSet(pcSetManager.getPcSet(configuration, component));
                return null;
            }

            @Override
            protected void done() {
                super.done(); //To change body of generated methods, choose Tools | Templates.
            }
        };
        
        worker.execute();
    }
    
    private void refreshPriceAndPower() {
        BigDecimal price = BigDecimal.ZERO;
        Integer power = 0;
        Iterator it = pcSetManager.listCompsInConfiguration(currentConfiguration).entrySet().iterator();
        
        while (it.hasNext()) {
            Map.Entry pairs = (Map.Entry) it.next();
            Component tempComponent = (Component) pairs.getKey();
            
            Integer count = ((Integer) pairs.getValue())==0 ? 1 : ((Integer) pairs.getValue());
            price.add(tempComponent.getPrice().multiply(new BigDecimal(count)));
            power += tempComponent.getPower();
            it.remove(); // avoids a ConcurrentModificationException
        }

        totalPriceLabel.setText(price.toString());
        totalPowerLabel.setText(power.toString());
    }
}
